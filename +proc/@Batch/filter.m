function [tf, errorMessage] = filter(varargin)

options = struct(...
    'workingDirectory','./',...
    'geometryIn','geom.mat',...
    'matOut','filter.mat',...
    'logOut','filter.log',...
    'ndiv',[3,3,3],...
    'window',2,...
    'maxCount',20,...
    'smax',Inf,...
    'refineGrid',true,...
    'parallel',false);

BatchProcess = proc.Batch('proc.Batch.filter',options,varargin{:});
options = BatchProcess.options; % post-processed options

try % START MAIN SCRIPT
        
    BatchProcess.start();
    
    [InGeom,RefGeom,InIS,WedgeIS] = BatchProcess.readFromMatFile(...
        options.geometryIn,'InputGeometry','RefinedGeometry',...
        'InputImageSeries','WedgeImageSeries');
    
    [Grid,pixelMask] = filterScript(1,options,InGeom,RefGeom,InIS,WedgeIS);
    
    BatchProcess.saveToMatFile(options.matOut,...
            'options',options,...
            'Grid',Grid,...
            'pixelMask',pixelMask);
        
    BatchProcess.finish; % done!
    
catch errorMessage
    % calcel parallel process if it exists
    if options.parallel && exist('F','var')
        cancel(F); 
    end
    BatchProcess.stop(errorMessage);
end

tf = BatchProcess.hasCompleted;
errorMessage = BatchProcess.errorMessage;

end
