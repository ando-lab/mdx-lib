function [tf, errorMessage] = integrate(varargin)

options = struct(...
    'workingDirectory','./',...
    'geometryIn','geom.mat',...
    'gridIn','filter.mat',...
    'matOut','integrate.mat',...
    'logOut','integrate.log',...
    'binMode','coarse',...  %'coarse','fine'
    'binExcludedVoxels',true,...  %   'arrayType','full',...
    'parallel',false);    %'full','sparse'

BatchProcess = proc.Batch('proc.Batch.integrate',options,varargin{:});
options = BatchProcess.options; % post-processed options

try % START MAIN SCRIPT
    
    BatchProcess.start();
    
    [InGeom,RefGeom,InIS,WedgeIS] = BatchProcess.readFromMatFile(...
        options.geometryIn,'InputGeometry','RefinedGeometry',...
        'InputImageSeries','WedgeImageSeries');

    [Grid,pixelMask] = BatchProcess.readFromMatFile(options.gridIn,...
        'Grid','pixelMask');
     
    [bin,binExcl] = integrateScript(1,options,Grid,pixelMask,...
        InGeom,RefGeom,InIS,WedgeIS);
    
    if options.binExcludedVoxels
        BatchProcess.saveToMatFile(options.matOut,...
            'options',options,...
            'bin',bin,...
            'binExcl',binExcl);
    else
        BatchProcess.saveToMatFile(options.matOut,...
            'options',options,...
            'bin',bin);
    end
    BatchProcess.finish; % done!
    
catch errorMessage
    BatchProcess.stop(errorMessage);
end
tf = BatchProcess.hasCompleted;
errorMessage = BatchProcess.errorMessage;
end
