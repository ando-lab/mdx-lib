function [tf, errorMessage] = cbf2geom(varargin)
% proc.Batch.cbf2geom - this script automates the reading of
% header data from a cbf image in order to decide which frames
% belong to each wedge (RefinedGeometry in geomIn).
%
% [tf,errorMessage] = proc.Batch.cbf2geom(...
%       'geometryIn','geomIn.mat',...
%       'matOut','geomOut.mat',...
%       'fileNameTemplate','data/lys_1_bkg_1_????.cbf',...
%       'frameRange',[1,360]);
%
% The script is used as a preliminary step in Background
% subtraction.

options = struct(...
    'workingDirectory','./',...
    'geometryIn','geom.mat',...
    'matOut','geomBkg.mat',...
    'logOut','cbf2geom.log',...
    'fileNameTemplate','',...
    'frameRange',[],...
    'startingAngleField','Start_angle',...
    'oscillationRangeField','Angle_increment');

BatchProcess = proc.Batch('proc.Batch.cbf2geom',options,varargin{:});
options = BatchProcess.options; % post-processed options

try % START MAIN SCRIPT
        
    BatchProcess.start();

    [RefinedGeometry] = BatchProcess.readFromMatFile(...
        options.geometryIn,'RefinedGeometry');
    
    InputImageSeries = io.ImageSeries('fileNameTemplate',...
        io.xds.FileNameTemplate(options.fileNameTemplate).format,...
        'frameRange',options.frameRange);
    
    firstFileName = InputImageSeries.files{1};
    fprintf(1,'  reading image file %s\n',firstFileName);
    imageHeader = io.PilatusHeader.read(firstFileName);
    
    RotationSeries = geom.RotationSeries(...
        'seriesFrameRange',InputImageSeries.frameRange,...
        'startingFrame',InputImageSeries.frameRange(1),...
        'startingAngle',imageHeader.(options.startingAngleField),...
        'oscillationRange',imageHeader.(options.oscillationRangeField));
    
    fprintf(1,'  matching frames to wedge geometry\n');
    WedgeImageSeries = io.ImageSeries.empty();
    for j=1:length(RefinedGeometry)
        frames = sort(RotationSeries.getMatchingFrames(...
            RefinedGeometry(j).Spindle),'ascend');
        WedgeImageSeries(j) = io.ImageSeries(...
            'frameRange',frames([1,end]),...
            'excludedFrames',setdiff(frames(1):frames(end),frames));
    end
    
    BatchProcess.saveToMatFile(options.matOut,...
            'options',options,...
            'InputImageSeries',InputImageSeries,...
            'WedgeImageSeries',WedgeImageSeries);
    
    BatchProcess.finish; % done!
    
catch errorMessage
    BatchProcess.stop(errorMessage);
end

tf = BatchProcess.hasCompleted;
errorMessage = BatchProcess.errorMessage;

end